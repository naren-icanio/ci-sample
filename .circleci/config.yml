version: 2.1

orbs:
  # For documentation and more usage examples, see the orb's repo and registry pages:
  # https://github.com/rainforestapp/rainforest-orb
  # https://circleci.com/orbs/registry/orb/rainforest-qa/rainforest
  rainforest: rainforest-qa/rainforest@3
  heroku: circleci/heroku@1.1.1

commands:
  check_chosen_ci:
    steps:
      - run:
          name: Pick CI
          command: |
            ci=$(script/pick_ci.sh)
            echo "Picked $ci"
            if [ $ci != "circleci" ] ; then
              circleci-agent step halt
            fi
jobs:
  test:
    docker:
      - image: circleci/ruby:2.7.1-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
        environment:
          RACK_ENV: test
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/rspec
      - run: gem install bundler
      - run: bundle install
      - run: bundle exec rake

  run_rainforest:
    docker:
      - image: cimg/base:2021.12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
    steps:
      - checkout
      - check_chosen_ci
      - run: mkdir -p /home/circleci/.local/bin
      - rainforest/install:
          install_path: /home/circleci/.local/bin
      - rainforest/run_qa: # Command provided by the Orb, to be used in your own jobs
          run_group_id: ${RELEASE_RUN_GROUP_ID:-2401}
          environment_id: ${RELEASE_ENVIRONMENT_ID:-343}
          crowd: ${RELEASE_CROWD:-default}
          conflict: abort
          pipeline_id: << pipeline.id >>

  merge_to_master:
    docker:
      - image: cimg/base:2020.01
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_TOKEN
    steps:
      - checkout
      - check_chosen_ci
      - run: git push origin $CIRCLE_SHA1:refs/heads/master

workflows:
  # Daily monitoring of general application functionality
  nightly:
    triggers:
      - schedule:
          cron: "0 0 16-31 * *"
          filters:
            branches:
              only: develop
    jobs:
      - test
      # Run our Rainforest tests. `run_group_id` should point to the Run Group you
      # want to use for your releases. `environment_id` should point to your Staging or QA
      # environment.
      - rainforest/run: # Job provided by the orb, to be used in your workflows
          name: run_rainforest
          run_group_id: ${RELEASE_RUN_GROUP_ID:-2401}
          environment_id: ${RELEASE_ENVIRONMENT_ID:-343}
          crowd: ${RELEASE_CROWD:-default}
          conflict: abort
          # Passing in the pipeline ID enables rerunning only failed Rainforest tests when
          # rerunning a failed CircleCI build.
          pipeline_id: << pipeline.id >>

  test_and_merge:
    jobs:
      - test:
          context:
            - DockerHub

      # Push our code to our staging or QA server. We're using Heroku here but you will need
      # to change this to match how you deploy your releases.
      - heroku/deploy-via-git:
          name: deploy_staging
          app-name: rainforest-ci-sample-staging
          pre-deploy:
            - check_chosen_ci
          filters:
            branches:
              only: develop

      # Run our Rainforest tests as above, but to be performed on any merge.
      - run_rainforest:
          requires:
            - deploy_staging

      # Our Rainforest build was successful! Push the code to the master branch which
      # will start another CircleCI workflow that will deploy our code to production.
      - merge_to_master:
          requires:
            - run_rainforest
          context:
            - DockerHub

  release:
    jobs:
      - heroku/deploy-via-git:
          name: deploy_production
          app-name: rainforest-ci-sample-prd
          filters:
            branches:
              only: master
          context:
            - DockerHub
